// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import data "gin-example/app/data"
import mock "github.com/stretchr/testify/mock"

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Book provides a mock function with given fields: id
func (_m *BookService) Book(id uint) *data.Book {
	ret := _m.Called(id)

	var r0 *data.Book
	if rf, ok := ret.Get(0).(func(uint) *data.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Book)
		}
	}

	return r0
}

// DeleteBook provides a mock function with given fields: id
func (_m *BookService) DeleteBook(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostBook provides a mock function with given fields: title, author
func (_m *BookService) PostBook(title string, author string) (uint, error) {
	ret := _m.Called(title, author)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, string) uint); ok {
		r0 = rf(title, author)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(title, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBook provides a mock function with given fields: id, title, author
func (_m *BookService) PutBook(id uint, title string, author string) error {
	ret := _m.Called(id, title, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, string) error); ok {
		r0 = rf(id, title, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
